<?php


namespace Tools4Schools\Graph;

use Tools4Schools\Graph\Contracts\Schema\Types\ObjectType as ObjectTypeContract;

use Illuminate\Database\Eloquent\Model;
use Tools4Schools\Graph\Contracts\Schema\Types\Type;
use Tools4Schools\Graph\Fields\RelationField;
use Tools4Schools\Graph\Language\AST\Node;
use Tools4Schools\Graph\Types\ListType;
use Tools4Schools\Graph\Schema\Types\ObjectType;


abstract class EloquentType extends ObjectType
{

    public $type;

    /**
     * @var Model
     */
    protected $query;


    /**
     * Get a fresh instance of the model represented by the resource.
     *
     * @return mixed
     */
    public static function newModel()
    {
        $model = static::$model;

        return new $model;
    }




    public function resolve(ObjectTypeContract $parent = null, array $arguments = [], $context = null, $info = null)
    {
        if(!is_null($parent) && !is_null($parent->value))
        {
            $this->value = $parent->value;
        }

        if(is_null($this->value)) {

            //dd($context['Eloquent']->addModel(static::model));

            $this->query = static::newModel();

            $this->resolveArguments($info);

            $this->resolveFields($info);

            if ($this->type instanceof ListType) {
                $this->value = $this->query->get();

                $result = [];

                foreach ($this->value as $value) {
                    $result[] = parent::resolve($this,[],$context,$info);
                }
                return $result;
            }
            $this->value = $this->query->first();

        }

        return parent::resolve($this,[],$context,$info);
    }


    protected function resolveFields($node)
    {
        foreach ($node->getSelectionSet() as $field) {

            if ($this->hasField($field->getName())) {
                $type = $this->getField($field->getName());
                if($type instanceof RelationField)
                {
                    $this->query = $this->query->with($field->getName());
                    //$this->query = $this->query->addSelect($field->getName());
                    continue;
                }else {
                    //$this->query = $this->query->addSelect($type->name());
                }
            }else{
                //@todo throw field not on type exception
            }
        }
    }

    protected function resolveArguments($node)
    {
        if($node->hasArguments())
        {
            foreach($node->getArguments() as $argument)
            {
                $this->query = $this->query->where($argument->name(),$argument->value());
            }
        }
    }

    /*public function resolve(Node $requestNode)
    {

        foreach ($requestNode->getSelectionSet() as $selection) {
            dump($selection);
        }


        // foreach $requestNode->selectionset() as selection
        // if this ->has field(selection->name())
        //this->getField(selection->name)->resolve()
        
        //parent::resolve($requestNode); // TODO: Change the autogenerated stub
    }*/
}