<?php


namespace Tools4Schools\Graph;


use Illuminate\Database\Eloquent\Model;
use Tools4Schools\Graph\Fields\RelationField;
use Tools4Schools\Graph\Language\AST\Node;
use Tools4Schools\Graph\Types\ListType;

abstract class EloquentType extends ObjectType
{

    public $type;

    /**
     * @var Model
     */
    protected $query;

    /**
     * Get a fresh instance of the model represented by the resource.
     *
     * @return mixed
     */
    public static function newModel()
    {
        $model = static::$model;

        return new $model;
    }


    public function resolve($node,BaseType $parent = null)
    {
        //dump($node);
        $this->query = static::newModel();

        $this->resolveArguments($node);

        $this->resolveFields($node);

        if($this->type instanceof ListType)
        {
            $this->value =  $this->query->get();
            $result = [];

                foreach($this->value as $value)
                {
                    $result[] = parent::resolve($node,$this);
                }
            return $result;
        }
            $this->value =  $this->query->first();

        return parent::resolve($node,$this);
    }


    protected function resolveFields($node)
    {
        foreach ($node->getSelectionSet() as $field) {

            if ($this->hasField($field->getName())) {
                $type = $this->getField($field->getName());
                if($type instanceof RelationField)
                {
                    $this->query = $this->query->with($field->getName());
                    continue;
                }else {
                    $this->query = $this->query->select($type->name());
                }
            }else{
                //@todo throw field not on type exception
            }
        }
    }

    protected function resolveArguments($node)
    {
        if($node->hasArguments())
        {
            foreach($node->getArguments() as $argument)
            {
                $this->query = $this->query->where($argument->name(),$argument->value());
            }
        }
    }

    /*public function resolve(Node $requestNode)
    {

        foreach ($requestNode->getSelectionSet() as $selection) {
            dump($selection);
        }


        // foreach $requestNode->selectionset() as selection
        // if this ->has field(selection->name())
        //this->getField(selection->name)->resolve()
        
        //parent::resolve($requestNode); // TODO: Change the autogenerated stub
    }*/
}