<?php


namespace Tools4Schools\Graph;


use GraphQL\Type\Definition\ObjectType;
use GraphQL\Type\Definition\Type as GraphqlType;
use Illuminate\Http\Request;
use Tools4Schools\Graph\Language\AST\Field;
use Tools4Schools\Graph\Language\AST\Node;

abstract class Type
{

    public static $name;

    public static $description ='';

    abstract public function fields();

  /*  public function getAttributes(){
        $attributes['name'] = $this->name();
        $attributes['description'] = static::$description;
        $attributes['fields'] = $this->getFields();

        return $attributes;
    }*/

  /*  public function toArray(): array
    {
        return $this->getAttributes();
    }
*/
   /* public function toGraphType(): GraphqlType
    {
        return new ObjectType($this->toArray());
    }
*/
    /**
     * returns the supported fields
     *
     * @return array
     */
   /* public function getFields()
    {
        $fields = [];

        foreach ($this->fields() as $field)
        {
            $fields = $fields + $field->toGraphObject();
        }
        return $fields;
    }*/

    /**
     * returns the name of this type
     *
     * @return string
     * @throws \ReflectionException
     */
    public function name():string
    {
        if(static::$name != '')
        {
            return static::$name;
        }

        return (new \ReflectionClass($this))->getShortName();
    }

    public function resolve(Field $requestNode)
    {
        $result =[];
        // if $requestNode has
        foreach ($requestNode->getSelectionSet() as $selection) {
            if($this->hasField($selection->getName()))
            {
                $result[$selection->getNameOrAlias()] = $this->getField($selection->getName())->resolve($this);
            }
        }

        return $result;

        // foreach $requestNode->selectionset() as selection
        // if this ->has field(selection->name())
        //this->getField(selection->name)->resolve()

        //parent::resolve($requestNode); // TODO: Change the autogenerated stub
    }

    protected function hasField($fieldName)
    {
        foreach ($this->fields() as $field) {
            if($field->name() == $fieldName)
            {
                return true;
            }
        }
        return false;
    }

    protected function getField($fieldName)
    {
        foreach ($this->fields() as $field) {
            if($field->name() == $fieldName)
            {
                return $field;
            }
        }
    }
}