<?php

namespace Tools4Schools\Graph\Introspection;

use Tools4Schools\Graph\Contracts\Schema\Types\ObjectType;
use Tools4Schools\Graph\Contracts\Schema\Types\Type;
use Tools4Schools\Graph\Contracts\Schema\Types\OperationType;
use Tools4Schools\Graph\Contracts\Schema\Schema as SchemaContract;

use Tools4Schools\Graph\Fields\HasOne;
use Tools4Schools\Graph\Fields\HasMany;
use Tools4Schools\Graph\Fields\RelationField;
use Tools4Schools\Graph\Schema\Types\ListType;
use Tools4Schools\Graph\Types\QueryType;
//use Tools4Schools\Graph\Types\IntrospectionType;

use Tools4Schools\Graph\Introspection\Type as IntrospectionType;

class Schema extends QueryType implements OperationType
{
    protected $schema;

    protected function type()
    {
        return Type::class;
    }

    public function __construct(SchemaContract $schema)
    {
        $this->schema = $schema;
       parent::__construct('__schema');
    }

    public function fields():array
    {
        return [
            //HasMany::make(IntrospectionType::make('Types',$this->schema->types())->required(),'types')->required(),
            ListType::make('types',IntrospectionType::class)->required(),
            //IntrospectionType::make('types',$this->schema->types())->required(),
            IntrospectionType::make('queryType', $this->schema->getType('Query'))->required(),
            IntrospectionType::make('mutationType', $this->schema->getType('Mutation')),
            IntrospectionType::make('subscriptionType', $this->schema->getType('Subscription')),

           // HasMany::make(new IntrospectionType($this->schema->directives()),'Directives'),
        ];
    }

    public function resolve(ObjectType $parent = null, array $arguments = [], $context = null, $info = null)
    {
        $this->value = $this->schema;
        return parent::resolve($parent, $arguments, $context, $info); // TODO: Change the autogenerated stub
    }
    /*
        public function resolve(ObjectType $parent = null,array $arguments = [],$context=null,$info=null)
        {
            $result =[];
            //dump($this->fields());
            foreach ($info->getSelectionSet() as $selection) {
                //dump($selection->getName(),$this->hasField($selection->getName()));
              if($this->hasField($selection->getName()))
              {
                  $result[$selection->getNameOrAlias()] = $this->getField($selection->getName())->resolve($this, [], $context, $selection);
              }
            }

            return $result; // */
   // }
}